{
   "methods" : {
      "getUnfreezeTime(address,address)" : {
         "params" : {
            "_owner" : "token owner to get unfreeze time for\r",
            "_token" : "token to get unfreeze time for the owner of\r"
         },
         "return" : "unfreeze time for given owner of given token\r"
      },
      "isAuthorizedAddress(address,address)" : {
         "params" : {
            "_address" : "address to get authorization of\r",
            "_token" : "token to get authorization to change unfreeze times for the\r       owners of\r"
         }
      },
      "setAddressClassifier(address)" : {
         "params" : {
            "_addressClassifier" : "new address classifier to be used by this smart\r       contract\r"
         }
      },
      "setAuthorizedAddress(address,address,bool)" : {
         "params" : {
            "_address" : "address to set authorization for the owner of\r",
            "_authorized" : "true to authorize, false to revoke authorization\r",
            "_token" : "token to set authorization to change unfreeze times for the\r       owners of\r"
         }
      },
      "setUnfreezeTime(address,address,uint256)" : {
         "params" : {
            "_owner" : "token owner to set unfreeze time for\r",
            "_token" : "token to set unfreeze time for the owner of\r",
            "_unfreezeTime" : "unfreeze time for given token\r"
         }
      },
      "transferAuthorized(address,address,address,uint256)" : {
         "params" : {
            "_from" : "address tokens to be transferred from\r",
            "_to" : "address tokens to be transferred to\r",
            "_token" : "token to be transferred\r",
            "_value" : "number of tokens to be transferred\r"
         },
         "return" : "true if transfer is authorized, false otherwise\r"
      }
   }
}
